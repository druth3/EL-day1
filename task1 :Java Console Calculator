import java.util.*;
public class ExpressionCalculator {
    public static double evaluateExpression(String expression) {
        expression = expression.replaceAll("\\s+", "");
        List<String> postfix = infixToPostfix(expression);
        return evaluatePostfix(postfix);
    }
    private static List<String> infixToPostfix(String expr) {
        List<String> output = new ArrayList<>();
        Stack<Character> operators = new Stack<>();
        StringBuilder number = new StringBuilder();
        for (int i = 0; i < expr.length(); i++) {
            char c = expr.charAt(i);
            if (Character.isDigit(c) || c == '.') {
                number.append(c);
            } else {
                if (number.length() > 0) {
                    output.add(number.toString());
                    number.setLength(0);
                }
                if (isOperator(c)) {
                    while (!operators.isEmpty() && precedence(operators.peek()) >= precedence(c)) {
                        output.add(String.valueOf(operators.pop()));
                    }
                    operators.push(c);
                } else if (c == '(') {
                    operators.push(c);
                } else if (c == ')') {
                    while (!operators.isEmpty() && operators.peek() != '(') {
                        output.add(String.valueOf(operators.pop()));
                    }
                    if (!operators.isEmpty()) operators.pop();
                }
            }
        }

        if (number.length() > 0) output.add(number.toString());
        while (!operators.isEmpty()) output.add(String.valueOf(operators.pop()));

        return output;
    }
    private static double evaluatePostfix(List<String> postfix) {
        Stack<Double> stack = new Stack<>();

        for (String token : postfix) {
            if (isNumber(token)) {
                stack.push(Double.parseDouble(token));
            } else {
                double b = stack.pop();
                double a = stack.pop();
                switch (token) {
                    case "+" -> stack.push(a + b);
                    case "-" -> stack.push(a - b);
                    case "*" -> stack.push(a * b);
                    case "/" -> {
                        if (b == 0) throw new ArithmeticException("Division by zero!");
                        stack.push(a / b);
                    }
                    case "^" -> stack.push(Math.pow(a, b));
                    case "%" -> stack.push(a % b);
                }
            }
        }

        return stack.pop();
    }

    private static boolean isNumber(String s) {
        try {
            Double.parseDouble(s);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private static boolean isOperator(char c) {
        return "+-*/^%".indexOf(c) != -1;
    }

    private static int precedence(char op) {
        return switch (op) {
            case '+', '-' -> 1;
            case '*', '/', '%' -> 2;
            case '^' -> 3;
            default -> -1;
        };
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Smart Java Expression Calculator");
        System.out.println("Type mathematical expressions like:");
        System.out.println("5+3*2");
        System.out.println("(10-4)/2");
        System.out.println("2^3 + 5*(6-2)");
        System.out.println("Type 'exit' to quit.\n");

        while (true) {S
            try {
                System.out.print("Enter expression: ");
                String input = scanner.nextLine();
                if (input.equalsIgnoreCase("exit")) break;

                double result = evaluateExpression(input);
                System.out.printf("Result: %.4f%n%n", result);
            } catch (ArithmeticException e) {
                System.out.println(" Error: " + e.getMessage() + "\n");
            } catch (Exception e) {
                System.out.println(" Invalid expression! Please try again.\n");
            }
        }
        System.out.println(" Goodbye!. Try Again.");
        scanner.close();
    }
}
