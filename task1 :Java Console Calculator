import java.util.*;
public class ExpressionCalculator {
    public static double evalExpr(String expr) {
        expr = expr.replaceAll("\\s+", "");
        List<String> post = toPostfix(expr);
        return evalPost(post);
    }
    private static List<String> toPostfix(String expr) {
        List<String> out = new ArrayList<>();
        Stack<Character> ops = new Stack<>();
        StringBuilder num = new StringBuilder();
        for (int i = 0; i < expr.length(); i++) {
            char c = expr.charAt(i);
            if (Character.isDigit(c) || c == '.') {
                num.append(c);
            } else {
                if (num.length() > 0) {
                    out.add(num.toString());
                    num.setLength(0);
                }
                if (isOp(c)) {
                    while (!ops.isEmpty() && prec(ops.peek()) >= prec(c)) {
                        out.add(String.valueOf(ops.pop()));
                    }
                    ops.push(c);
                } else if (c == '(') {
                    ops.push(c);
                } else if (c == ')') {
                    while (!ops.isEmpty() && ops.peek() != '(') {
                        out.add(String.valueOf(ops.pop()));
                    }
                    if (!ops.isEmpty()) ops.pop();
                }
            }
        }
        if (num.length() > 0) out.add(num.toString());
        while (!ops.isEmpty()) out.add(String.valueOf(ops.pop()));

        return out;
    }

    private static double evalPost(List<String> post) {
        Stack<Double> stk = new Stack<>();

        for (String t : post) {
            if (isNum(t)) {
                stk.push(Double.parseDouble(t));
            } else {
                double b = stk.pop();
                double a = stk.pop();
                switch (t) {
                    case "+" -> stk.push(a + b);
                    case "-" -> stk.push(a - b);
                    case "*" -> stk.push(a * b);
                    case "/" -> {
                        if (b == 0) throw new ArithmeticException("Divide by zero!");
                        stk.push(a / b);
                    }
                    case "^" -> stk.push(Math.pow(a, b));
                    case "%" -> stk.push(a % b);
                }
            }
        }
        return stk.pop();
    }
    private static boolean isNum(String s) {
        try {
            Double.parseDouble(s);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private static boolean isOp(char c) {
        return "+-*/^%".indexOf(c) != -1;
    }

    private static int prec(char op) {
        return switch (op) {
            case '+', '-' -> 1;
            case '*', '/', '%' -> 2;
            case '^' -> 3;
            default -> -1;
        };
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Smart Java Expression Calculator");
        System.out.println("Examples:");
        System.out.println("5+3*2");
        System.out.println("(10-4)/2");
        System.out.println("2^3+5*(6-2)");
        System.out.println("Type 'exit' to quit.\n");
        while (true) {
            try {
                System.out.print("Enter expression: ");
                String in = sc.nextLine();
                if (in.equalsIgnoreCase("exit")) break;
                double res = evalExpr(in);
                System.out.printf("Result: %.4f%n%n", res);
            } catch (ArithmeticException e) {
                System.out.println("Error: " + e.getMessage() + "\n");
            } catch (Exception e) {
                System.out.println("Invalid expression! Try again.\n");
            }
        }
        System.out.println("Goodbye! Try again soon.");
        sc.close();
    }
}

//there is also simple method to slove this only using some small input and output but i have learned to evaluate for a string
